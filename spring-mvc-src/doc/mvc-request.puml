@startuml
client -> Server: contextInitialized()
Server --> SocketProcessor: doRun()处理请求
SocketProcessor --> StandardEngineValve:
StandardEngineValve -->ApplicationFilterChain:doFilter()调用filter链路
ApplicationFilterChain->ApplicationFilterChain:internalDoFilter()
ApplicationFilterChain->DispatcherServlet:service()
DispatcherServlet->DispatcherServlet:doService()
DispatcherServlet->DispatcherServlet:doDispatch()
DispatcherServlet->DispatcherServlet:checkMultipart()检查是否为文件上传
DispatcherServlet->DispatcherServlet:getHandler()据请求信息，获取对应的处理器\n如果没有匹配到则返回null(404)
DispatcherServlet->HandlerExecutionChain:applyPreHandle()执行前置拦截器(HandlerInterceptor)
DispatcherServlet->RequestMappingHandlerAdapter:handle()将执处理器
RequestMappingHandlerAdapter->RequestMappingHandlerAdapter:handleInternal()
RequestMappingHandlerAdapter->RequestMappingHandlerAdapter:invokeHandlerMethod()封装调用准备(出入参处理类)
RequestMappingHandlerAdapter->ServletInvocableHandlerMethod:invokeAndHandle()
ServletInvocableHandlerMethod->ServletInvocableHandlerMethod:invokeForRequest
ServletInvocableHandlerMethod->ServletInvocableHandlerMethod:getMethodArgumentValues()获取请求参数
ServletInvocableHandlerMethod->HandlerMethodArgumentResolverComposite:supportsParameter()判断是否支持该参数解释
ServletInvocableHandlerMethod->HandlerMethodArgumentResolverComposite:resolveArgument()开始解释某个入参
HandlerMethodArgumentResolverComposite->HandlerMethodArgumentResolverComposite:getArgumentResolver()获取可以解释该参数的处理器
HandlerMethodArgumentResolverComposite->HandlerMethodArgumentResolver:resolveArgument()实际性的处理参数
HandlerMethodArgumentResolverComposite->ServletInvocableHandlerMethod
ServletInvocableHandlerMethod->ServletInvocableHandlerMethod:doInvoke()通过反射调用实际方法
ServletInvocableHandlerMethod->HandlerMethodReturnValueHandlerComposite:handleReturnValue()处理返回值
client <-- Server:
@enduml